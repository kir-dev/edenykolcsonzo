// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum RentalStatus {
    REQUESTED
    ACCEPTED
    EXPIRED
    BROUGHT_BACK
}

model Rental {
    id               Int          @id @default(autoincrement())
    userId           String
    user             User         @relation(fields: [userId], references: [id])
    status           RentalStatus @default(REQUESTED)
    startDateMessage String
    endDateMessage   String
    startDate        DateTime
    endDate          DateTime
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @updatedAt
    ToolRental       ToolRental[]
}

model Tool {
    id          Int          @id @default(autoincrement())
    name        String
    description String
    rentable    Boolean
    quantity    Int
    image       String?
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    rentals     ToolRental[]
}

model ToolRental {
    rentalId            Int
    rental              Rental   @relation(fields: [rentalId], references: [id])
    toolId              Int
    tool                Tool     @relation(fields: [toolId], references: [id])
    quantity            Int
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    broughtBackQuantity Int?

    @@id([rentalId, toolId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    fullName      String?
    nickname      String?
    role          Role      @default(USER)
    roomNumber    Int?
    profileImage  String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    Rental Rental[]
}

enum Role {
    USER
    EK_MEMBER
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
